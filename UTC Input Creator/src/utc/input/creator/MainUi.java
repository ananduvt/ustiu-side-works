/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package utc.input.creator;

import Globals.Data;
import java.awt.Color;
import java.awt.Desktop;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Properties;
import java.util.logging.Level;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.pmw.tinylog.Configurator;
import org.pmw.tinylog.Logger;

/**
 *
 * @author u55369
 */
public class MainUi extends javax.swing.JFrame {

    /**
     * Creates new form MainUi
     */
    public MainUi() {
        initComponents();
        Data.initialize();
        uiInitialize();
    }

    private void uiInitialize() {
        Configurator.currentConfig().addWriter(new CustomWriter(logDisplay)).activate();

        Logger.info("UI initilaizing");
        BufferedImage image = null;
        try {
            image = ImageIO.read(getClass().getClassLoader().getResource("res/icon.png"));
        } catch (IOException e) {
            e.printStackTrace();
        }
        setIconImage(image);

        modeGroup.add(fileMode);
        modeGroup.add(folderMode);

        property = Data.getProperties();

        String items = property.getProperty("Ui.VisibleProperties");
        for (String key : items.split(",")) {
            propertyList.addItem(key);
        }
        propertyList.setSelectedItem("BenefitPlan.EffectiveDate");
        propertyValue.setText((String) property.get(propertyList.getSelectedItem()));
        Logger.info("UI initilaize Complete");

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        modeGroup = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        fileMode = new javax.swing.JRadioButton();
        folderMode = new javax.swing.JRadioButton();
        chooseInput = new javax.swing.JButton();
        modeLabel = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        inputLabel = new javax.swing.JLabel();
        propertyList = new javax.swing.JComboBox<>();
        propertyValue = new javax.swing.JTextField();
        propertyChange = new javax.swing.JButton();
        openOutput = new javax.swing.JButton();
        generate = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        logDisplay = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("UTC Input Creator");
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(51, 51, 51));
        jPanel1.setForeground(new java.awt.Color(255, 255, 255));

        fileMode.setBackground(new java.awt.Color(51, 51, 51));
        fileMode.setForeground(new java.awt.Color(255, 255, 255));
        fileMode.setText("File Mode");
        fileMode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileModeActionPerformed(evt);
            }
        });

        folderMode.setBackground(new java.awt.Color(51, 51, 51));
        folderMode.setForeground(new java.awt.Color(255, 255, 255));
        folderMode.setText("Folder Mode");
        folderMode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                folderModeActionPerformed(evt);
            }
        });

        chooseInput.setBackground(new java.awt.Color(51, 51, 51));
        chooseInput.setForeground(new java.awt.Color(51, 51, 51));
        chooseInput.setText("Choose Input");
        chooseInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseInputActionPerformed(evt);
            }
        });

        modeLabel.setBackground(new java.awt.Color(51, 51, 51));
        modeLabel.setForeground(new java.awt.Color(255, 0, 0));
        modeLabel.setText("Choose Operation Mode");

        jLabel2.setBackground(new java.awt.Color(51, 51, 51));
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Source : ");

        inputLabel.setBackground(new java.awt.Color(51, 51, 51));
        inputLabel.setForeground(new java.awt.Color(255, 0, 0));
        inputLabel.setText("Please select a source");

        propertyList.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { }));
        propertyList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                propertyListActionPerformed(evt);
            }
        });

        propertyValue.setForeground(new java.awt.Color(51, 51, 51));

        propertyChange.setBackground(new java.awt.Color(51, 51, 51));
        propertyChange.setForeground(new java.awt.Color(51, 51, 51));
        propertyChange.setText("Change");
        propertyChange.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                propertyChangeActionPerformed(evt);
            }
        });

        openOutput.setBackground(new java.awt.Color(51, 51, 51));
        openOutput.setText("Open Output");
        openOutput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openOutputActionPerformed(evt);
            }
        });

        generate.setBackground(new java.awt.Color(51, 51, 51));
        generate.setText("Generate ");
        generate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateActionPerformed(evt);
            }
        });

        jLabel1.setForeground(new java.awt.Color(51, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Please Review the Properties Before Generating the Output");

        logDisplay.setEditable(false);
        logDisplay.setBackground(new java.awt.Color(51, 51, 51));
        logDisplay.setColumns(20);
        logDisplay.setForeground(new java.awt.Color(255, 255, 255));
        logDisplay.setRows(5);
        jScrollPane2.setViewportView(logDisplay);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 569, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(fileMode)
                                .addGap(31, 31, 31)
                                .addComponent(folderMode))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(42, 42, 42)
                                .addComponent(modeLabel)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(chooseInput, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(inputLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(propertyList, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(propertyValue)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(propertyChange))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(generate, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(openOutput, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(modeLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(fileMode)
                            .addComponent(folderMode)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(chooseInput)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(inputLabel))
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addGap(14, 14, 14)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(propertyList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(propertyValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(propertyChange))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(generate)
                    .addComponent(openOutput))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 112, Short.MAX_VALUE)
                .addContainerGap())
        );

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void chooseInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseInputActionPerformed
        // TODO add your handling code here:

        if (mode.equals("none")) {
            JOptionPane.showMessageDialog(this, "Please choose an operation mode before choosing the source", "Sorry", JOptionPane.WARNING_MESSAGE);
            Logger.warn("Please choose an operation mode before choosing the source");

        } else if (mode.equals("folder")) {
            JFileChooser fileChooser = new JFileChooser();

            fileChooser.setCurrentDirectory(new java.io.File("."));
            fileChooser.setDialogTitle("Choose the input folder");
            fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            fileChooser.setAcceptAllFileFilterUsed(false);

            if (fileChooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
                input = fileChooser.getSelectedFile().getAbsolutePath();
                inputLabel.setText(input);
                Logger.info("The selected folder : {}", fileChooser.getSelectedFile());
                inputLabel.setForeground(Color.WHITE);
            }

        } else if (mode.equals("file")) {
            JFileChooser fileChooser = new JFileChooser();
            fileChooser.setCurrentDirectory(new java.io.File("."));
            fileChooser.setDialogTitle("Choose the input file");
            fileChooser.addChoosableFileFilter(new FileNameExtensionFilter("CSV files", "csv"));
            fileChooser.setAcceptAllFileFilterUsed(true);

            if (fileChooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
                input = fileChooser.getSelectedFile().getAbsolutePath();
                inputLabel.setText(input);
                Logger.info("The selected file : {}", fileChooser.getSelectedFile());
                inputLabel.setForeground(Color.WHITE);
            }

        } else {
            Logger.warn("invalid mode");
        }

    }//GEN-LAST:event_chooseInputActionPerformed

    private void fileModeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileModeActionPerformed
        // TODO add your handling code here:
        mode = "file";
        Logger.info("Selected Operation mode : {}", mode);
        modeLabel.setForeground(Color.WHITE);

    }//GEN-LAST:event_fileModeActionPerformed

    private void folderModeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_folderModeActionPerformed
        // TODO add your handling code here:
        mode = "folder";
        Logger.info("Selected Operation mode : {}", mode);
        modeLabel.setForeground(Color.WHITE);

    }//GEN-LAST:event_folderModeActionPerformed

    private void propertyListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_propertyListActionPerformed
        // TODO add your handling code here:
        propertyValue.setText((String) property.get(propertyList.getSelectedItem()));
    }//GEN-LAST:event_propertyListActionPerformed

    private void propertyChangeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_propertyChangeActionPerformed
        // TODO add your handling code here:
        property.setProperty((String) propertyList.getSelectedItem(), propertyValue.getText());
        Logger.info("Changed the property {} to {}", (String) propertyList.getSelectedItem(), propertyValue.getText());
        Data.setProperties(property);
        try {
            property.store(new FileOutputStream(new File(Data.getPropertyFileName())), null);
            Logger.info("Updated property to {} file", Data.getPropertyFileName());
        } catch (FileNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainUi.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            java.util.logging.Logger.getLogger(MainUi.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_propertyChangeActionPerformed

    private void generateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateActionPerformed
        // TODO add your handling code here:
        if (mode.equals("none")) {
            JOptionPane.showMessageDialog(this, "Please choose an operation mode before Generating the output", "Sorry", JOptionPane.WARNING_MESSAGE);
            Logger.warn("Please choose an operation mode before Generating the output");
        } else {
            if (input == null) {
                JOptionPane.showMessageDialog(this, "Please choose an input source before Generating the output", "Sorry", JOptionPane.WARNING_MESSAGE);
                Logger.warn("Please choose an input source before Generating the output");
            } else {

                Main.Run.commandLineMode(mode, input);
                isGenerated = true;
            }
        }

    }//GEN-LAST:event_generateActionPerformed

    private void openOutputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openOutputActionPerformed
        // TODO add your handling code here:
        if (isGenerated) {
            Desktop desktop = Desktop.getDesktop();
            try {
                desktop.open(new File(Data.getOutputFolderName()));
                Logger.info("Output Folder opened : {} ", Data.getOutputFolderName());
            } catch (IOException ex) {
                Logger.warn("Cant open output folder : {} ", ex);
                java.util.logging.Logger.getLogger(MainUi.class.getName()).log(Level.SEVERE, null, ex);
            }

    }//GEN-LAST:event_openOutputActionPerformed
 else {
            JOptionPane.showMessageDialog(this, "Please generate the output before opening the output folder", "Sorry", JOptionPane.WARNING_MESSAGE);
            Logger.warn("Please generate the output before opening the output folder");
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {

                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainUi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainUi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainUi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainUi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainUi().setVisible(true);
            }
        });
    }

    private String mode = "none";
    private String input;
    private Properties property;
    private boolean isGenerated = false;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton chooseInput;
    private javax.swing.JRadioButton fileMode;
    private javax.swing.JRadioButton folderMode;
    private javax.swing.JButton generate;
    private javax.swing.JLabel inputLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea logDisplay;
    private javax.swing.ButtonGroup modeGroup;
    private javax.swing.JLabel modeLabel;
    private javax.swing.JButton openOutput;
    private javax.swing.JButton propertyChange;
    private javax.swing.JComboBox<String> propertyList;
    private javax.swing.JTextField propertyValue;
    // End of variables declaration//GEN-END:variables
}
